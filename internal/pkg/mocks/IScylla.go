// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IScylla is an autogenerated mock type for the IScylla type
type IScylla struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IScylla) Close() {
	_m.Called()
}

// Delete provides a mock function with given fields: ctx, stmt, arguments
func (_m *IScylla) Delete(ctx context.Context, stmt string, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, stmt, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, stmt, arguments
func (_m *IScylla) Insert(ctx context.Context, stmt string, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, stmt, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanMap provides a mock function with given fields: ctx, stmt, results, arguments
func (_m *IScylla) ScanMap(ctx context.Context, stmt string, results map[string]interface{}, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt, results)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, stmt, results, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIScylla interface {
	mock.TestingT
	Cleanup(func())
}

// NewIScylla creates a new instance of IScylla. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIScylla(t mockConstructorTestingTNewIScylla) *IScylla {
	mock := &IScylla{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
