package mocks

import (
	"context"

	"github.com/gocql/gocql"
	"github.com/maraino/go-mock"
)

type ScyllaInterface interface {
	Insert(ctx context.Context, stmt string, values ...interface{}) error
	ScanMap(ctx context.Context, stmt string, results map[string]interface{}, arguments ...interface{}) error
	List(ctx context.Context, stmt string) *gocql.Iter
	Update(ctx context.Context, stmt string, values ...interface{}) error
	Delete(ctx context.Context, stmt string, values ...interface{}) error
}

// Scylla is an autogenerated mock type for the RepositoryInterface type
type Scylla struct {
	mock.Mock
}

func NewScylla() *Scylla {
	return &Scylla{}
}

// Insert provides a mock function with given fields: ctx, stmt, params
func (m *Scylla) Insert(ctx context.Context, stmt string, values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt)
	_ca = append(_ca, values...)
	ret := m.Called(_ca...).Error(0)

	return ret
}

// Scan implements Session.
func (m *Scylla) ScanMap(ctx context.Context, stmt string, results map[string]interface{}, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, stmt)
	_ca = append(_ca, results)
	_ca = append(_ca, arguments...)
	ret := m.Called(_ca...).Error(0)
	return ret
}

func (m *Scylla) List(ctx context.Context, stmt string) *gocql.Iter {

	return nil
}

func (m *Scylla) Update(ctx context.Context, stmt string, values ...interface{}) error {
	q := m.Called(stmt, values)
	return q.Error(0)
}

func (m *Scylla) Delete(ctx context.Context, stmt string, values ...interface{}) error {
	q := m.Called(stmt, values)
	return q.Error(0)
}
